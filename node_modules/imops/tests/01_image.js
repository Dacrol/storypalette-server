unit=require('./units');
fs=require('fs');
im=require('../build/Release/imops.node')

var gi=null;

unit.run('precond', function() {
    try {
        fs.mkdirSync('/tmp/test');
    } catch (ignored) {}
    unit.assert(fs.existsSync('/tmp/test'));
});

unit.run('load', function() {
    gi = new im.image();
    unit.assert(gi != null);
    unit.assert(gi.read(__dirname + '/image.jpg'));
    unit.assert(gi.width != 0);
    unit.assert(gi.bpp == 24);
});
/*
unit.run('metadata', function() {
    var md = gi.metadata(im.metadata.IPTC);
    unit.assert(md != null);
    unit.assert(md.CopyrightNotice == 'testo');
});
*/
unit.run('convert', function() {
    unit.assert(gi.write('/tmp/test/image_converted.jpg'));
});

/*
unit.run('flip', function() {
    var tmp=gi.flip();
    unit.assert(tmp != null);
    unit.assert(tmp.write('/tmp/test/image_flipped.png'));
});
*/

unit.run('rotate', function() {
    var tmp=gi.rotate(-15);
    unit.assert(tmp != null);
    unit.assert(tmp.write('/tmp/test/image_rotated.png'));
});

unit.run('grayscale', function() {
    var tmp=gi.gray();
    unit.assert(tmp != null);
    unit.assert(tmp.write('/tmp/test/image_grayscale.png'));
});

unit.run('scale', function() {
    var tmp=gi.scale(gi.width/2, gi.height/2);
    unit.assert(tmp != null);
    unit.assert(tmp.write('/tmp/test/image_scaled.png'));
});

unit.run('crop x,y w,h', function() {
    var tmp=gi.crop(100, 100, gi.width-200, gi.height-200);
    unit.assert(tmp != null);
    unit.assert(tmp.write('/tmp/test/image_cropped_0.png'));
});

unit.run('crop w,h', function() {
    var tmp=gi.crop(gi.width/2, gi.height/2);
    unit.assert(tmp != null);
    unit.assert(tmp.write('/tmp/test/image_cropped_1.png'));
});

/*
unit.run('alpha', function() {
    var tmp=gi.alpha();
    unit.assert(tmp != null);
    unit.assert(tmp.write('/tmp/test/image_alpha.png'));
});
*/

unit.run('colormean', function() {
    var colors = gi.colormean(16);
    console.log("r: " + colors[0]);
    console.log("g: " + colors[1]);
    console.log("b: " + colors[2]);
});

unit.run('dispose', function() {
    gi.dispose();
    gi = null;
});

global.gc();



