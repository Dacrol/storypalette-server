#ifndef image_H_
#define image_H_

#include <node.h>
#include <v8.h>

#include <FreeImage.h>

using namespace v8;

class image : node::ObjectWrap {
public:
    static void init(Handle<Object> target);

    static Handle<Value> New(const Arguments& args);
    static image* New(FIBITMAP* img);
    
    static Handle<Value> read(const Arguments& args);
    static Handle<Value> write(const Arguments& args);
    static Handle<Value> dispose(const Arguments& args);

    static Handle<Value> flip(const Arguments& args);
    static Handle<Value> rotate(const Arguments& args);
    static Handle<Value> grayscale(const Arguments& args);
    static Handle<Value> scale(const Arguments& args);
    static Handle<Value> crop(const Arguments& args);
    static Handle<Value> alpha(const Arguments& args);

    static Handle<Value> metadata(const Arguments& args);
    
protected:
    ~image();
    static Handle<Value> parse(const char* buffer, int length);   
private:
    image(Handle<Object> wrapper);
    static Persistent<FunctionTemplate> constructor_template;
    FIBITMAP* dib;
};
#endif
